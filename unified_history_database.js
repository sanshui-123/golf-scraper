#!/usr/bin/env node

/**
 * üóÑÔ∏è Áªü‰∏ÄÂéÜÂè≤Êï∞ÊçÆÂ∫ì
 * Êï¥ÂêàURLÊï∞ÊçÆÂ∫ìÂíåÂÜÖÂÆπÊï∞ÊçÆÂ∫ìÔºåÊèê‰æõÁªü‰∏ÄÊü•ËØ¢Êé•Âè£
 * ÂΩªÂ∫ïËß£ÂÜ≥URLÁ≠õÈÄâÂ§±ÊïàÈóÆÈ¢òÁöÑÊ†∏ÂøÉÁªÑ‰ª∂
 */

const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

class UnifiedHistoryDatabase {
    constructor() {
        this.dbPath = path.join(__dirname, 'master_history_database.json');
        this.urlDbPath = path.join(__dirname, 'history_url_database.json');
        this.contentDbPath = path.join(__dirname, 'content_hash_database.json');
        this.lockPath = this.dbPath + '.lock';
        
        this.masterDB = {
            urls: {},           // URL -> Â§ÑÁêÜËÆ∞ÂΩïÊò†Â∞Ñ
            contents: {},       // ÂÜÖÂÆπhash -> URLÊò†Â∞Ñ
            titles: {},         // Ê†áÈ¢òhash -> URLÊò†Â∞Ñ (Ê®°Á≥äÂåπÈÖç)
            metadata: {
                lastUpdate: null,
                totalRecords: 0,
                version: '2.0'
            }
        };
        
        // ‰ΩøÁî®Set‰ºòÂåñÊü•ËØ¢ÊÄßËÉΩ
        this.urlKeysSet = new Set();
        
        // Ëá™Âä®‰øùÂ≠òÊ†áÂøó
        this.autoSave = true;
        this.saveTimer = null;
        
        this.loadDatabase();
    }

    /**
     * Âä†ËΩΩÂπ∂Êï¥ÂêàÊâÄÊúâÂéÜÂè≤Êï∞ÊçÆÂ∫ì
     */
    loadDatabase() {
        try {
            // 1. Â∞ùËØïÂä†ËΩΩ‰∏ªÊï∞ÊçÆÂ∫ì
            if (fs.existsSync(this.dbPath)) {
                console.log('üìä Âä†ËΩΩÁªü‰∏ÄÂéÜÂè≤Êï∞ÊçÆÂ∫ì...');
                const data = fs.readFileSync(this.dbPath, 'utf8');
                this.masterDB = { ...this.masterDB, ...JSON.parse(data) };
                // ÂàùÂßãÂåñURLÈîÆÈõÜÂêà
                this.urlKeysSet = new Set(Object.keys(this.masterDB.urls));
                console.log(`‚úÖ Â∑≤Âä†ËΩΩ ${this.urlKeysSet.size} Êù°URLËÆ∞ÂΩï`);
                return;
            }

            // 2. Â¶ÇÊûú‰∏ªÊï∞ÊçÆÂ∫ì‰∏çÂ≠òÂú®Ôºå‰ªéÊóßÊï∞ÊçÆÂ∫ìËøÅÁßª
            console.log('üîÑ Ê£ÄÊµãÂà∞ÊóßÊï∞ÊçÆÂ∫ìÔºåÂºÄÂßãËøÅÁßªÊï¥Âêà...');
            this.migrateFromLegacyDatabases();
            
        } catch (error) {
            console.error('‚ùå Êï∞ÊçÆÂ∫ìÂä†ËΩΩÂ§±Ë¥•:', error.message);
            console.log('üÜï ÂàõÂª∫Êñ∞ÁöÑÁªü‰∏ÄÊï∞ÊçÆÂ∫ì');
            this.masterDB = {
                urls: {},
                contents: {},
                titles: {},
                metadata: {
                    lastUpdate: new Date().toISOString(),
                    totalRecords: 0,
                    version: '2.0'
                }
            };
        }
    }

    /**
     * ‰ªéÊóßÊï∞ÊçÆÂ∫ìËøÅÁßªÊï∞ÊçÆ
     */
    migrateFromLegacyDatabases() {
        let migrated = 0;

        // ËøÅÁßªURLÊï∞ÊçÆÂ∫ì
        if (fs.existsSync(this.urlDbPath)) {
            const urlDB = JSON.parse(fs.readFileSync(this.urlDbPath, 'utf8'));
            console.log('üì• ËøÅÁßªURLÂéÜÂè≤Êï∞ÊçÆ...');
            
            for (const [normalizedUrl, records] of Object.entries(urlDB)) {
                if (Array.isArray(records)) {
                    records.forEach(record => {
                        const key = this.generateUrlKey(record.originalUrl || normalizedUrl);
                        this.masterDB.urls[key] = {
                            originalUrl: record.originalUrl,
                            normalizedUrl: normalizedUrl,
                            status: record.status,
                            date: record.date,
                            articleNum: record.articleNum,
                            processedAt: new Date().toISOString(),
                            source: 'url_db_migration'
                        };
                        this.urlKeysSet.add(key);
                        migrated++;
                    });
                }
            }
            console.log(`‚úÖ Â∑≤ËøÅÁßª ${migrated} Êù°URLËÆ∞ÂΩï`);
        }

        // ËøÅÁßªÂÜÖÂÆπhashÊï∞ÊçÆÂ∫ì
        if (fs.existsSync(this.contentDbPath)) {
            const contentDB = JSON.parse(fs.readFileSync(this.contentDbPath, 'utf8'));
            console.log('üì• ËøÅÁßªÂÜÖÂÆπhashÊï∞ÊçÆ...');
            
            let contentMigrated = 0;
            for (const [hash, record] of Object.entries(contentDB)) {
                this.masterDB.contents[hash] = {
                    url: record.url,
                    title: record.title || '',
                    publishDate: record.publishDate,
                    processedDate: record.processedDate,
                    contentLength: record.contentLength,
                    source: 'content_db_migration'
                };

                // ÂêåÊó∂‰∏∫Ê†áÈ¢òÂª∫Á´ãÁ¥¢Âºï
                if (record.title) {
                    const titleHash = this.generateTitleHash(record.title);
                    this.masterDB.titles[titleHash] = hash;
                }
                contentMigrated++;
            }
            console.log(`‚úÖ Â∑≤ËøÅÁßª ${contentMigrated} Êù°ÂÜÖÂÆπËÆ∞ÂΩï`);
        }

        this.masterDB.metadata.totalRecords = migrated;
        this.masterDB.metadata.lastUpdate = new Date().toISOString();
        this.saveDatabase();
        console.log('üéâ Êï∞ÊçÆÂ∫ìËøÅÁßªÂÆåÊàêÔºÅ');
    }

    /**
     * ÁîüÊàêURLÂîØ‰∏ÄÈîÆ
     */
    generateUrlKey(url) {
        return crypto.createHash('md5').update(url.toLowerCase()).digest('hex');
    }

    /**
     * ÁîüÊàêÊ†áÈ¢òhashÁî®‰∫éÊ®°Á≥äÂåπÈÖç
     */
    generateTitleHash(title) {
        const cleanTitle = title
            .replace(/[.,!?;:"'"ÔºàÔºâ„Äê„Äë]/g, '')
            .replace(/\s+/g, ' ')
            .toLowerCase()
            .trim();
        return crypto.createHash('md5').update(cleanTitle).digest('hex');
    }

    /**
     * Ê£ÄÊü•URLÊòØÂê¶Â∑≤Â§ÑÁêÜÔºà‰ºòÂåñÁâàÔºâ
     * @param {string} url - Ë¶ÅÊ£ÄÊü•ÁöÑURL
     * @returns {object|null} - Â§ÑÁêÜËÆ∞ÂΩïÊàñnull
     */
    isUrlProcessed(url) {
        const key = this.generateUrlKey(url);
        
        // ‰ΩøÁî®SetÂø´ÈÄüÊ£ÄÊü•
        if (!this.urlKeysSet.has(key)) {
            return null;
        }
        
        const record = this.masterDB.urls[key];
        if (record) {
            // ÂáèÂ∞ëÊó•ÂøóËæìÂá∫ÔºåÊèêÈ´òÊÄßËÉΩ
            if (process.env.DEBUG_DEDUP) {
                console.log(`üîç ÂèëÁé∞URLÂéÜÂè≤ËÆ∞ÂΩï: ${url}`);
                console.log(`   Áä∂ÊÄÅ: ${record.status}, Â§ÑÁêÜÊó∂Èó¥: ${record.date}`);
            }
            return record;
        }
        return null;
    }

    /**
     * Ê£ÄÊü•ÂÜÖÂÆπÊòØÂê¶Â∑≤Â§ÑÁêÜÔºàÈÄöËøáÊ†áÈ¢òÂåπÈÖçÔºâ
     * @param {string} title - ÊñáÁ´†Ê†áÈ¢ò
     * @returns {object|null} - ÂÜÖÂÆπËÆ∞ÂΩïÊàñnull
     */
    isContentProcessed(title) {
        const titleHash = this.generateTitleHash(title);
        const contentHash = this.masterDB.titles[titleHash];
        
        if (contentHash && this.masterDB.contents[contentHash]) {
            const record = this.masterDB.contents[contentHash];
            console.log(`üîç ÂèëÁé∞Ê†áÈ¢òÈáçÂ§ç: "${title}"`);
            console.log(`   ÂéüÊñáÁ´†: ${record.url} (${record.processedDate})`);
            return record;
        }
        return null;
    }

    /**
     * Ê£ÄÊü•Âçï‰∏™URLÁöÑÁä∂ÊÄÅÔºàÂ¢ûÂº∫ÁâàÔºâ
     * @param {string} url - Ë¶ÅÊ£ÄÊü•ÁöÑURL
     * @returns {object} - URLÁä∂ÊÄÅ‰ø°ÊÅØ
     */
    checkUrl(url) {
        const key = this.generateUrlKey(url);
        const record = this.masterDB.urls[key];
        
        if (record) {
            // Â¢ûÂä†Áä∂ÊÄÅÈ™åËØÅ
            if (record.status === 'completed' && record.date && record.articleNum) {
                // È™åËØÅÊñáÁ´†Êñá‰ª∂ÊòØÂê¶ÁúüÁöÑÂ≠òÂú®
                const path = require('path');
                const fs = require('fs');
                const articlePath = path.join(
                    __dirname, 
                    'golf_content', 
                    record.date, 
                    'wechat_ready',
                    `wechat_article_${record.articleNum}.md`
                );
                
                if (!fs.existsSync(articlePath)) {
                    // Êñá‰ª∂‰∏çÂ≠òÂú®ÔºåËøîÂõûÈúÄË¶ÅÈáçÊñ∞Â§ÑÁêÜÁöÑÁä∂ÊÄÅ
                    return {
                        ...record,
                        status: 'missing',
                        needsReprocess: true,
                        originalStatus: 'completed',
                        missingFile: articlePath
                    };
                }
            }
            return record;
        }
        
        return { status: 'new' };
    }

    /**
     * Ëé∑ÂèñÂ§ÑÁêÜÂéÜÂè≤ÁªüËÆ°
     * @param {number} days - Êü•ËØ¢ÊúÄËøëÂá†Â§©ÁöÑËÆ∞ÂΩï
     * @returns {object} - ÁªüËÆ°‰ø°ÊÅØ
     */
    getProcessingHistory(days = 7) {
        const cutoffDate = new Date();
        cutoffDate.setDate(cutoffDate.getDate() - days);
        
        const recentUrls = Object.values(this.masterDB.urls).filter(record => {
            return new Date(record.processedAt || record.date) > cutoffDate;
        });

        const recentContents = Object.values(this.masterDB.contents).filter(record => {
            return new Date(record.processedDate) > cutoffDate;
        });

        return {
            totalUrls: Object.keys(this.masterDB.urls).length,
            totalContents: Object.keys(this.masterDB.contents).length,
            recentUrls: recentUrls.length,
            recentContents: recentContents.length,
            lastUpdate: this.masterDB.metadata.lastUpdate
        };
    }

    /**
     * Ê∑ªÂä†Â§ÑÁêÜËÆ∞ÂΩï
     * @param {object} record - Â§ÑÁêÜËÆ∞ÂΩï
     */
    addProcessedRecord(record) {
        if (record.url) {
            const urlKey = this.generateUrlKey(record.url);
            this.masterDB.urls[urlKey] = {
                originalUrl: record.url,
                normalizedUrl: record.normalizedUrl || record.url,
                status: record.status || 'completed',
                date: record.date || new Date().toISOString().split('T')[0],
                articleNum: record.articleNum,
                processedAt: new Date().toISOString(),
                source: 'new_record'
            };
            // Êõ¥Êñ∞Set
            this.urlKeysSet.add(urlKey);
        }

        if (record.contentHash && record.title) {
            this.masterDB.contents[record.contentHash] = {
                url: record.url,
                title: record.title,
                publishDate: record.publishDate,
                processedDate: new Date().toISOString(),
                contentLength: record.contentLength,
                source: 'new_record'
            };

            const titleHash = this.generateTitleHash(record.title);
            this.masterDB.titles[titleHash] = record.contentHash;
        }

        this.masterDB.metadata.totalRecords = this.urlKeysSet.size;
        this.masterDB.metadata.lastUpdate = new Date().toISOString();
        
        // Ëá™Âä®‰øùÂ≠ò
        if (this.autoSave) {
            this.scheduleSave();
        }
    }
    
    /**
     * Á´ãÂç≥Ê∑ªÂä†Â∑≤Â§ÑÁêÜÁöÑURLÔºàÊñ∞Â¢ûÊñπÊ≥ïÔºâ
     * @param {string} url - URL
     * @param {object} metadata - ÂÖÉÊï∞ÊçÆ
     */
    addProcessedUrl(url, metadata = {}) {
        const urlKey = this.generateUrlKey(url);
        
        this.masterDB.urls[urlKey] = {
            originalUrl: url,
            normalizedUrl: metadata.normalizedUrl || url,
            status: metadata.status || 'completed',
            date: metadata.date || new Date().toISOString().split('T')[0],
            articleNum: metadata.articleNum,
            processedAt: new Date().toISOString(),
            source: metadata.source || 'batch_processor',
            siteName: metadata.siteName,
            ...metadata
        };
        
        // Êõ¥Êñ∞Set
        this.urlKeysSet.add(urlKey);
        
        this.masterDB.metadata.totalRecords = this.urlKeysSet.size;
        this.masterDB.metadata.lastUpdate = new Date().toISOString();
        
        // Ëá™Âä®‰øùÂ≠ò
        if (this.autoSave) {
            this.scheduleSave();
        }
    }

    /**
     * ÊâπÈáèÊ£ÄÊü•URLÂàóË°®Ôºà‰ºòÂåñÁâàÔºâ
     * @param {array} urls - URLÂàóË°®
     * @returns {object} - Á≠õÈÄâÁªìÊûú
     */
    batchCheckUrls(urls) {
        const results = {
            newUrls: [],
            duplicateUrls: [],
            statistics: {
                total: urls.length,
                new: 0,
                duplicate: 0,
                completed: 0,
                failed: 0,
                skipped: 0,
                other: 0
            }
        };

        // ÊâπÈáèÊ£ÄÊü•ÔºåÂáèÂ∞ëÈáçÂ§çËÆ°ÁÆó
        const urlsWithKeys = urls.map(url => ({
            url,
            key: this.generateUrlKey(url)
        }));

        urlsWithKeys.forEach(({url, key}) => {
            if (this.urlKeysSet.has(key)) {
                const record = this.masterDB.urls[key];
                if (record && record.status) {
                    // ÊâÄÊúâÂ∑≤Â§ÑÁêÜÁöÑÁä∂ÊÄÅÈÉΩÂ∫îËØ•Ë¢´ËÆ§‰∏∫ÊòØ"Â∑≤Â§ÑÁêÜ"ÔºåËÄå‰∏çÊòØ"Êñ∞"URL
                    const processedStatuses = ['completed', 'duplicate', 'failed', 'skipped', 'permanent_failed'];
                    
                    if (processedStatuses.includes(record.status)) {
                        results.duplicateUrls.push({
                            url: url,
                            reason: 'url_already_processed',
                            originalDate: record.date,
                            status: record.status,
                            articleNum: record.articleNum
                        });
                        
                        // ÁªüËÆ°ÂêÑÁßçÁä∂ÊÄÅ
                        if (record.status === 'completed') results.statistics.completed++;
                        else if (record.status === 'failed') results.statistics.failed++;
                        else if (record.status === 'skipped') results.statistics.skipped++;
                        else if (record.status === 'duplicate') results.statistics.duplicate++;
                        else results.statistics.other++;
                        
                        return;
                    } else if (record.status === 'processing') {
                        // processingÁä∂ÊÄÅÁâπÊÆäÂ§ÑÁêÜÔºöÂ¶ÇÊûúË∂ÖËøá1Â∞èÊó∂ÔºåËÆ§‰∏∫ÊòØÂ§ÑÁêÜ‰∏≠Êñ≠ÔºåÁÆó‰ΩúÊñ∞URL
                        const processedAt = new Date(record.processedAt || record.date);
                        const hoursSinceProcessing = (Date.now() - processedAt) / (1000 * 60 * 60);
                        
                        if (hoursSinceProcessing > 1) {
                            console.log(`‚ö†Ô∏è URLÂ§ÑÁêÜË∂ÖÊó∂ÔºåÂ∞ÜÈáçÊñ∞Â§ÑÁêÜ: ${url}`);
                            results.newUrls.push(url);
                        } else {
                            // ‰ªçÂú®Â§ÑÁêÜ‰∏≠ÔºåÁÆó‰ΩúÂ∑≤Â§ÑÁêÜ
                            results.duplicateUrls.push({
                                url: url,
                                reason: 'currently_processing',
                                originalDate: record.date,
                                status: record.status,
                                articleNum: record.articleNum
                            });
                            results.statistics.other++;
                        }
                        return;
                    }
                }
            }
            results.newUrls.push(url);
        });

        results.statistics.new = results.newUrls.length;
        results.statistics.duplicate = results.duplicateUrls.length;

        console.log(`üîç ÊâπÈáèÊ£ÄÊü•ÁªìÊûú: ${results.statistics.new}‰∏™Êñ∞URL, ${results.statistics.duplicate}‰∏™Â∑≤Â§ÑÁêÜURL`);
        if (results.statistics.completed > 0) console.log(`   ‚úÖ completed: ${results.statistics.completed}`);
        if (results.statistics.failed > 0) console.log(`   ‚ùå failed: ${results.statistics.failed}`);
        if (results.statistics.skipped > 0) console.log(`   ‚è≠Ô∏è skipped: ${results.statistics.skipped}`);
        if (results.statistics.duplicate > 0) console.log(`   üîÑ duplicate: ${results.statistics.duplicate}`);
        
        return results;
    }
    
    /**
     * Âª∂Ëøü‰øùÂ≠òÊï∞ÊçÆÂ∫ìÔºàÈò≤Ê≠¢È¢ëÁπÅÂÜôÂÖ•Ôºâ
     */
    scheduleSave() {
        if (this.saveTimer) {
            clearTimeout(this.saveTimer);
        }
        
        this.saveTimer = setTimeout(() => {
            this.saveDatabase();
            this.saveTimer = null;
        }, 1000); // 1ÁßíÂêé‰øùÂ≠ò
    }

    /**
     * Ê∏ÖÁêÜËøáÊúüËÆ∞ÂΩï
     * @param {number} days - ‰øùÁïôÊúÄËøëÂá†Â§©ÁöÑËÆ∞ÂΩï
     */
    cleanExpiredRecords(days = 30) {
        const cutoffDate = new Date();
        cutoffDate.setDate(cutoffDate.getDate() - days);
        
        let cleaned = 0;
        
        // Ê∏ÖÁêÜËøáÊúüURLËÆ∞ÂΩï
        for (const [key, record] of Object.entries(this.masterDB.urls)) {
            const recordDate = new Date(record.processedAt || record.date);
            if (recordDate < cutoffDate) {
                delete this.masterDB.urls[key];
                this.urlKeysSet.delete(key);
                cleaned++;
            }
        }

        console.log(`üßπ Â∑≤Ê∏ÖÁêÜ ${cleaned} Êù°ËøáÊúüËÆ∞ÂΩï (${days}Â§©Ââç)`);
        this.saveDatabase();
    }

    /**
     * ‰øùÂ≠òÊï∞ÊçÆÂ∫ìÔºàÂπ∂ÂèëÂÆâÂÖ®Ôºâ
     */
    saveDatabase() {
        try {
            // ‰ΩøÁî®‰∏¥Êó∂Êñá‰ª∂ÈÅøÂÖçÂπ∂ÂèëÂÜôÂÖ•ÈóÆÈ¢ò
            const tempPath = this.dbPath + '.tmp';
            
            // ÂÜôÂÖ•‰∏¥Êó∂Êñá‰ª∂
            fs.writeFileSync(tempPath, JSON.stringify(this.masterDB, null, 2), 'utf8');
            
            // ÂéüÂ≠êÊÄßÂú∞ÊõøÊç¢ÂéüÊñá‰ª∂
            fs.renameSync(tempPath, this.dbPath);
            
            if (process.env.DEBUG_DEDUP) {
                console.log('üíæ Áªü‰∏ÄÂéÜÂè≤Êï∞ÊçÆÂ∫ìÂ∑≤‰øùÂ≠ò');
            }
        } catch (error) {
            console.error('‚ùå Êï∞ÊçÆÂ∫ì‰øùÂ≠òÂ§±Ë¥•:', error.message);
            // Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂
            try {
                fs.unlinkSync(this.dbPath + '.tmp');
            } catch (e) {
                // ÂøΩÁï•Ê∏ÖÁêÜÈîôËØØ
            }
        }
    }

    /**
     * Ëé∑ÂèñÊï∞ÊçÆÂ∫ìÁä∂ÊÄÅ
     */
    getStatus() {
        return {
            totalUrls: Object.keys(this.masterDB.urls).length,
            totalContents: Object.keys(this.masterDB.contents).length,
            totalTitles: Object.keys(this.masterDB.titles).length,
            lastUpdate: this.masterDB.metadata.lastUpdate,
            version: this.masterDB.metadata.version
        };
    }

    /**
     * ËÆ∞ÂΩïÂ§±Ë¥•ÁöÑURL
     * @param {string} url - URLÂú∞ÂùÄ
     * @param {string} reason - Â§±Ë¥•ÂéüÂõ†
     * @param {object} metadata - È¢ùÂ§ñÂÖÉÊï∞ÊçÆ
     */
    addFailedUrl(url, reason, metadata = {}) {
        const urlKey = this.generateUrlKey(url);
        
        // ÂàùÂßãÂåñÂ§±Ë¥•ËÆ∞ÂΩïÁªìÊûÑ
        if (!this.masterDB.failedUrls) {
            this.masterDB.failedUrls = {};
        }
        
        // ËÆ∞ÂΩïÂ§±Ë¥•‰ø°ÊÅØ
        this.masterDB.failedUrls[urlKey] = {
            url: url,
            reason: reason,
            failedAt: new Date().toISOString(),
            attempts: (this.masterDB.failedUrls[urlKey]?.attempts || 0) + 1,
            metadata: {
                ...metadata,
                source: metadata.source || 'unknown',
                errorType: this.classifyError(reason),
                canRetry: this.isRetryable(reason)
            },
            history: [
                ...(this.masterDB.failedUrls[urlKey]?.history || []),
                {
                    timestamp: new Date().toISOString(),
                    reason: reason,
                    metadata: metadata
                }
            ]
        };
        
        this.saveDatabase();
        return true;
    }

    /**
     * ÂàÜÁ±ªÈîôËØØÁ±ªÂûã
     */
    classifyError(reason) {
        if (reason.includes('ClaudeËøîÂõûÁ©∫ÂÜÖÂÆπ')) return 'empty_response';
        if (reason.includes('Ë∂ÖÊó∂')) return 'timeout';
        if (reason.includes('API')) return 'api_error';
        if (reason.includes('ÁΩëÁªú')) return 'network_error';
        if (reason.includes('ÊäìÂèñÂ§±Ë¥•')) return 'scraping_error';
        if (reason.includes('ÂÜÖÂÆπÊó†Êïà')) return 'invalid_content';
        return 'unknown';
    }

    /**
     * Âà§Êñ≠ÊòØÂê¶ÂèØÈáçËØï
     */
    isRetryable(reason) {
        const nonRetryableErrors = ['ÂÜÖÂÆπÊó†Êïà', 'ÊñáÁ´†‰∏çÂ≠òÂú®', '404', '403'];
        return !nonRetryableErrors.some(err => reason.includes(err));
    }
}

module.exports = UnifiedHistoryDatabase;

// Â¶ÇÊûúÁõ¥Êé•ËøêË°åÊ≠§ËÑöÊú¨ÔºåÊâßË°åÊï∞ÊçÆÂ∫ìÁä∂ÊÄÅÊ£ÄÊü•
if (require.main === module) {
    const db = new UnifiedHistoryDatabase();
    const status = db.getStatus();
    console.log('\nüìä Áªü‰∏ÄÂéÜÂè≤Êï∞ÊçÆÂ∫ìÁä∂ÊÄÅ:');
    console.log(JSON.stringify(status, null, 2));
    
    const history = db.getProcessingHistory(7);
    console.log('\nüìà ÊúÄËøë7Â§©Â§ÑÁêÜÂéÜÂè≤:');
    console.log(JSON.stringify(history, null, 2));
}